{"uid":"fd9f7d5c7a323de3","name":"Test log in, make order, and check order counter raise","fullName":"tests.test_order_page.TestOrderPage#test_log_in_make_order_and_check_order_counter_raise","historyId":"c77043603cd5864cd22e919cce72d292","time":{"start":1715533448665,"stop":1715533448665,"duration":0},"status":"failed","statusMessage":"AssertionError: Failed to register user. Response: {'success': False, 'message': 'User already exists'}\nassert 403 == 200\n +  where 403 = <Response [403]>.status_code","statusTrace":"@pytest.fixture(scope=\"function\")\n    def random_user():\n        email = fake.email()\n        password = fake.password()\n        name = fake.name()\n    \n    \n        register_url = \"https://stellarburgers.nomoreparties.site/api/auth/register\"\n        register_data = {\n            \"email\": email,\n            \"password\": password,\n            \"name\": name\n        }\n        response = requests.post(register_url, json=register_data)\n    \n>       assert response.status_code == 200, f\"Failed to register user. Response: {response.json()}\"\nE       AssertionError: Failed to register user. Response: {'success': False, 'message': 'User already exists'}\nE       assert 403 == 200\nE        +  where 403 = <Response [403]>.status_code\n\nconftest.py:34: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1715533119618,"stop":1715533119651,"duration":33},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"attachmentStep":false,"hasContent":false,"stepsCount":0},{"name":"driver","time":{"start":1715533448667,"stop":1715533449882,"duration":1215},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"attachmentStep":false,"hasContent":false,"stepsCount":0},{"name":"random_user","time":{"start":1715533449882,"stop":1715533450508,"duration":626},"status":"failed","statusMessage":"AssertionError: Failed to register user. Response: {'success': False, 'message': 'User already exists'}\nassert 403 == 200\n +  where 403 = <Response [403]>.status_code\n","statusTrace":"  File \"C:\\Users\\Leila Magomedova.WKST-QA-08\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\pluggy\\_callers.py\", line 77, in _multicall\n    res = hook_impl.function(*args)\n          ^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Leila Magomedova.WKST-QA-08\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\_pytest\\fixtures.py\", line 1123, in pytest_fixture_setup\n    result = call_fixture_func(fixturefunc, request, kwargs)\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Leila Magomedova.WKST-QA-08\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\_pytest\\fixtures.py\", line 895, in call_fixture_func\n    fixture_result = next(generator)\n                     ^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Leila Magomedova.WKST-QA-08\\PycharmProjects\\Diploma\\Diplom_3\\conftest.py\", line 34, in random_user\n    assert response.status_code == 200, f\"Failed to register user. Response: {response.json()}\"\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"attachmentsCount":0,"attachmentStep":false,"hasContent":true,"stepsCount":0}],"afterStages":[{"name":"driver::0","time":{"start":1715533450514,"stop":1715533452603,"duration":2089},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"attachmentStep":false,"hasContent":false,"stepsCount":0}],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_order_page"},{"name":"subSuite","value":"TestOrderPage"},{"name":"host","value":"WKST-QA-08"},{"name":"thread","value":"17424-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_order_page"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"driver","value":"'chrome'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"tags":[]},"source":"fd9f7d5c7a323de3.json","parameterValues":["'chrome'"]}