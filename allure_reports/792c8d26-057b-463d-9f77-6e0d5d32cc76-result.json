{"name": "Test log in, make order, and check order counter raise", "status": "failed", "statusDetails": {"message": "AssertionError: Failed to register user. Response: {'success': False, 'message': 'User already exists'}\nassert 403 == 200\n +  where 403 = <Response [403]>.status_code", "trace": "@pytest.fixture(scope=\"function\")\n    def random_user():\n        email = fake.email()\n        password = fake.password()\n        name = fake.name()\n    \n    \n        register_url = \"https://stellarburgers.nomoreparties.site/api/auth/register\"\n        register_data = {\n            \"email\": email,\n            \"password\": password,\n            \"name\": name\n        }\n        response = requests.post(register_url, json=register_data)\n    \n>       assert response.status_code == 200, f\"Failed to register user. Response: {response.json()}\"\nE       AssertionError: Failed to register user. Response: {'success': False, 'message': 'User already exists'}\nE       assert 403 == 200\nE        +  where 403 = <Response [403]>.status_code\n\nconftest.py:34: AssertionError"}, "parameters": [{"name": "driver", "value": "'chrome'"}], "start": 1715533448665, "stop": 1715533448665, "uuid": "9ca60656-ff91-4dd9-8ed8-3f13df694d15", "historyId": "c77043603cd5864cd22e919cce72d292", "testCaseId": "e9e2f221d4ba7f5e8c2dfaa1f5a4ad92", "fullName": "tests.test_order_page.TestOrderPage#test_log_in_make_order_and_check_order_counter_raise", "labels": [{"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_order_page"}, {"name": "subSuite", "value": "TestOrderPage"}, {"name": "host", "value": "WKST-QA-08"}, {"name": "thread", "value": "17424-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_order_page"}]}